version: '3.8'

services:
  # AI Communication App with GPU support
  ai-communication-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_TARGET: gpu-base
    container_name: ai-communication-gpu
    ports:
      - "8501:8501"
    volumes:
      - model-cache:/root/.cache
      - ./logs:/app/logs
    environment:
      - MODEL_CACHE_DIR=/root/.cache/ai_communication_app
      - HF_HOME=/root/.cache/huggingface
      - TORCH_HOME=/root/.cache/torch
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    profiles:
      - gpu

  # AI Communication App with CPU only
  ai-communication-cpu:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_TARGET: cpu-base
    container_name: ai-communication-cpu
    ports:
      - "8502:8501"
    volumes:
      - model-cache:/root/.cache
      - ./logs:/app/logs
    environment:
      - MODEL_CACHE_DIR=/root/.cache/ai_communication_app
      - HF_HOME=/root/.cache/huggingface
      - TORCH_HOME=/root/.cache/torch
    restart: unless-stopped
    profiles:
      - cpu

  # Ollama service for LLM inference
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
    restart: unless-stopped
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-communication-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-communication-gpu
      - ollama
    restart: unless-stopped
    profiles:
      - nginx

  # Redis for session management (optional)
  redis:
    image: redis:alpine
    container_name: ai-communication-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - redis

  # PostgreSQL for conversation storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: ai-communication-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=ai_communication
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=secure_password_here
    restart: unless-stopped
    profiles:
      - database

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-communication-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-communication-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  model-cache:
    driver: local
  ollama-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    name: ai-communication-network